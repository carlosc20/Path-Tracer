//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-29618528
// Cuda compilation tools, release 11.2, V11.2.152
// Based on NVVM 7.0.1
//

.version 7.2
.target sm_52
.address_size 64

	// .globl	__closesthit__radiance
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func  (.param .b64 func_retval0) __internal_accurate_pow
(
	.param .b64 __internal_accurate_pow_param_0
)
;
.const .align 8 .b8 optixLaunchParams[96];
.global .align 1 .b8 $str[45] = {61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 10, 0};
.global .align 1 .b8 $str$1[23] = {78, 97, 117, 32, 82, 97, 121, 45, 84, 114, 97, 99, 105, 110, 103, 32, 68, 101, 98, 117, 103, 10, 0};
.global .align 1 .b8 $str$2[24] = {76, 105, 103, 104, 116, 80, 111, 115, 58, 32, 37, 102, 44, 32, 37, 102, 32, 37, 102, 32, 37, 102, 10, 0};
.global .align 1 .b8 $str$3[19] = {76, 97, 117, 110, 99, 104, 32, 100, 105, 109, 58, 32, 37, 117, 32, 37, 117, 10, 0};
.global .align 1 .b8 $str$4[29] = {82, 97, 121, 115, 32, 112, 101, 114, 32, 112, 105, 120, 101, 108, 32, 115, 113, 117, 97, 114, 101, 100, 58, 32, 37, 100, 32, 10, 0};
.global .align 1 .b8 $str$5[22] = {82, 101, 102, 114, 97, 99, 116, 105, 111, 110, 73, 110, 100, 101, 120, 58, 32, 37, 102, 32, 10, 0};

.visible .entry __closesthit__radiance()
{
	.reg .pred 	%p<12>;
	.reg .b16 	%rs<4>;
	.reg .f32 	%f<240>;
	.reg .b32 	%r<123>;
	.reg .b64 	%rd<33>;


	// begin inline asm
	call (%rd8), _optix_get_sbt_data_ptr_64, ();
	// end inline asm
	mov.u32 	%r2, 0;
	// begin inline asm
	call (%r1), _optix_get_payload, (%r2);
	// end inline asm
	mov.u32 	%r4, 1;
	// begin inline asm
	call (%r3), _optix_get_payload, (%r4);
	// end inline asm
	cvt.u64.u32 	%rd9, %r1;
	cvt.u64.u32 	%rd10, %r3;
	bfi.b64 	%rd2, %rd9, %rd10, 32, 32;
	// begin inline asm
	call (%r5), _optix_read_primitive_idx, ();
	// end inline asm
	ld.u64 	%rd11, [%rd8];
	mul.wide.s32 	%rd12, %r5, 12;
	add.s64 	%rd13, %rd11, %rd12;
	ld.u32 	%r6, [%rd13];
	ld.u32 	%r7, [%rd13+4];
	ld.u32 	%r8, [%rd13+8];
	// begin inline asm
	call (%f22, %f23), _optix_get_triangle_barycentrics, ();
	// end inline asm
	// begin inline asm
	call (%f24, %f25), _optix_get_triangle_barycentrics, ();
	// end inline asm
	mov.f32 	%f33, 0f3F800000;
	sub.ftz.f32 	%f34, %f33, %f22;
	sub.ftz.f32 	%f3, %f34, %f25;
	cvt.u64.u32 	%rd3, %r6;
	ld.u64 	%rd14, [%rd8+16];
	mul.wide.u32 	%rd15, %r6, 16;
	add.s64 	%rd16, %rd14, %rd15;
	ld.v4.f32 	{%f35, %f36, %f37, %f38}, [%rd16];
	cvt.u64.u32 	%rd4, %r7;
	mul.wide.u32 	%rd17, %r7, 16;
	add.s64 	%rd18, %rd14, %rd17;
	ld.v4.f32 	{%f42, %f43, %f44, %f45}, [%rd18];
	mul.ftz.f32 	%f49, %f22, %f42;
	mul.ftz.f32 	%f50, %f22, %f43;
	mul.ftz.f32 	%f51, %f22, %f44;
	fma.rn.ftz.f32 	%f52, %f35, %f3, %f49;
	fma.rn.ftz.f32 	%f53, %f3, %f36, %f50;
	fma.rn.ftz.f32 	%f54, %f3, %f37, %f51;
	cvt.u64.u32 	%rd5, %r8;
	mul.wide.u32 	%rd19, %r8, 16;
	add.s64 	%rd20, %rd14, %rd19;
	ld.v4.f32 	{%f55, %f56, %f57, %f58}, [%rd20];
	fma.rn.ftz.f32 	%f62, %f25, %f55, %f52;
	fma.rn.ftz.f32 	%f63, %f25, %f56, %f53;
	fma.rn.ftz.f32 	%f64, %f25, %f57, %f54;
	mul.ftz.f32 	%f65, %f63, %f63;
	fma.rn.ftz.f32 	%f66, %f62, %f62, %f65;
	fma.rn.ftz.f32 	%f67, %f64, %f64, %f66;
	rsqrt.approx.ftz.f32 	%f68, %f67;
	mul.ftz.f32 	%f69, %f62, %f68;
	mul.ftz.f32 	%f70, %f63, %f68;
	mul.ftz.f32 	%f71, %f64, %f68;
	// begin inline asm
	call (%f26), _optix_get_world_ray_direction_x, ();
	// end inline asm
	// begin inline asm
	call (%f27), _optix_get_world_ray_direction_y, ();
	// end inline asm
	// begin inline asm
	call (%f28), _optix_get_world_ray_direction_z, ();
	// end inline asm
	// begin inline asm
	call (%f29), _optix_get_world_ray_origin_x, ();
	// end inline asm
	// begin inline asm
	call (%f30), _optix_get_world_ray_origin_y, ();
	// end inline asm
	// begin inline asm
	call (%f31), _optix_get_world_ray_origin_z, ();
	// end inline asm
	// begin inline asm
	call (%f32), _optix_get_ray_tmax, ();
	// end inline asm
	fma.rn.ftz.f32 	%f4, %f26, %f32, %f29;
	fma.rn.ftz.f32 	%f5, %f27, %f32, %f30;
	fma.rn.ftz.f32 	%f6, %f28, %f32, %f31;
	mul.ftz.f32 	%f72, %f70, %f27;
	fma.rn.ftz.f32 	%f73, %f26, %f69, %f72;
	fma.rn.ftz.f32 	%f74, %f71, %f28, %f73;
	setp.gt.ftz.f32 	%p1, %f74, 0f00000000;
	neg.ftz.f32 	%f75, %f69;
	neg.ftz.f32 	%f76, %f70;
	neg.ftz.f32 	%f77, %f71;
	selp.f32 	%f7, %f75, %f69, %p1;
	selp.f32 	%f8, %f76, %f70, %p1;
	selp.f32 	%f9, %f77, %f71, %p1;
	ld.u32 	%r9, [%rd2+68];
	setp.ne.s32 	%p2, %r9, 0;
	@%p2 bra 	LBB0_2;

	ld.u8 	%rs1, [%rd2+60];
	setp.eq.s16 	%p3, %rs1, 0;
	@%p3 bra 	LBB0_4;

LBB0_2:
	ld.v2.f32 	{%f78, %f79}, [%rd8+88];
	mul.ftz.f32 	%f80, %f79, %f79;
	fma.rn.ftz.f32 	%f81, %f78, %f78, %f80;
	ld.f32 	%f12, [%rd8+96];
	fma.rn.ftz.f32 	%f82, %f12, %f12, %f81;
	sqrt.approx.ftz.f32 	%f83, %f82;
	setp.neu.ftz.f32 	%p4, %f83, 0f00000000;
	@%p4 bra 	LBB0_3;
	bra.uni 	LBB0_4;

LBB0_3:
	st.f32 	[%rd2], %f78;
	st.f32 	[%rd2+4], %f79;
	st.f32 	[%rd2+8], %f12;
	mov.u16 	%rs2, 1;
	st.u8 	[%rd2+61], %rs2;
	bra.uni 	LBB0_11;

LBB0_4:
	mov.f32 	%f239, 0f00000000;
	st.u32 	[%rd2], %r2;
	st.u32 	[%rd2+4], %r2;
	st.u32 	[%rd2+8], %r2;
	st.u32 	[%rd2+68], %r2;
	mov.u16 	%rs3, 0;
	st.u8 	[%rd2+60], %rs3;
	ld.u32 	%r11, [%rd2+64];
	mad.lo.s32 	%r12, %r11, 1664525, 1013904223;
	and.b32  	%r13, %r12, 16777215;
	cvt.rn.f32.u32 	%f85, %r13;
	mov.f32 	%f86, 0f4B800000;
	div.approx.ftz.f32 	%f87, %f85, %f86;
	mad.lo.s32 	%r14, %r12, 1664525, 1013904223;
	and.b32  	%r15, %r14, 16777215;
	cvt.rn.f32.u32 	%f88, %r15;
	div.approx.ftz.f32 	%f89, %f88, %f86;
	sqrt.approx.ftz.f32 	%f90, %f87;
	mul.ftz.f32 	%f91, %f89, 0f40C90FDB;
	cos.approx.ftz.f32 	%f92, %f91;
	mul.ftz.f32 	%f93, %f90, %f92;
	sin.approx.ftz.f32 	%f94, %f91;
	mul.ftz.f32 	%f95, %f90, %f94;
	mul.ftz.f32 	%f96, %f95, %f95;
	sub.ftz.f32 	%f98, %f33, %f96;
	mul.ftz.f32 	%f99, %f93, %f93;
	sub.ftz.f32 	%f100, %f98, %f99;
	max.ftz.f32 	%f101, %f239, %f100;
	sqrt.approx.ftz.f32 	%f102, %f101;
	abs.ftz.f32 	%f103, %f9;
	abs.ftz.f32 	%f104, %f7;
	setp.gt.ftz.f32 	%p5, %f104, %f103;
	neg.ftz.f32 	%f105, %f8;
	selp.f32 	%f106, %f105, 0f00000000, %p5;
	neg.ftz.f32 	%f107, %f9;
	selp.f32 	%f108, %f7, %f107, %p5;
	selp.f32 	%f109, 0f00000000, %f8, %p5;
	mul.ftz.f32 	%f110, %f108, %f108;
	fma.rn.ftz.f32 	%f111, %f106, %f106, %f110;
	fma.rn.ftz.f32 	%f112, %f109, %f109, %f111;
	rsqrt.approx.ftz.f32 	%f113, %f112;
	mul.ftz.f32 	%f114, %f106, %f113;
	mul.ftz.f32 	%f115, %f108, %f113;
	mul.ftz.f32 	%f116, %f109, %f113;
	mul.ftz.f32 	%f117, %f9, %f115;
	mul.ftz.f32 	%f118, %f8, %f116;
	sub.ftz.f32 	%f119, %f117, %f118;
	mul.ftz.f32 	%f120, %f7, %f116;
	mul.ftz.f32 	%f121, %f9, %f114;
	sub.ftz.f32 	%f122, %f120, %f121;
	mul.ftz.f32 	%f123, %f8, %f114;
	mul.ftz.f32 	%f124, %f7, %f115;
	sub.ftz.f32 	%f125, %f123, %f124;
	mul.ftz.f32 	%f126, %f122, %f122;
	fma.rn.ftz.f32 	%f127, %f119, %f119, %f126;
	fma.rn.ftz.f32 	%f128, %f125, %f125, %f127;
	rsqrt.approx.ftz.f32 	%f129, %f128;
	mul.ftz.f32 	%f130, %f129, %f119;
	mul.ftz.f32 	%f131, %f129, %f122;
	mul.ftz.f32 	%f132, %f129, %f125;
	mul.ftz.f32 	%f133, %f93, %f130;
	mul.ftz.f32 	%f134, %f93, %f131;
	mul.ftz.f32 	%f135, %f93, %f132;
	fma.rn.ftz.f32 	%f136, %f95, %f114, %f133;
	fma.rn.ftz.f32 	%f137, %f95, %f115, %f134;
	fma.rn.ftz.f32 	%f138, %f95, %f116, %f135;
	fma.rn.ftz.f32 	%f139, %f7, %f102, %f136;
	fma.rn.ftz.f32 	%f140, %f8, %f102, %f137;
	fma.rn.ftz.f32 	%f141, %f9, %f102, %f138;
	st.f32 	[%rd2+48], %f139;
	st.f32 	[%rd2+52], %f140;
	st.f32 	[%rd2+56], %f141;
	st.f32 	[%rd2+36], %f4;
	st.f32 	[%rd2+40], %f5;
	st.f32 	[%rd2+44], %f6;
	mad.lo.s32 	%r16, %r14, 1664525, 1013904223;
	and.b32  	%r17, %r16, 16777215;
	cvt.rn.f32.u32 	%f142, %r17;
	div.approx.ftz.f32 	%f143, %f142, %f86;
	mad.lo.s32 	%r18, %r16, 1664525, 1013904223;
	and.b32  	%r19, %r18, 16777215;
	cvt.rn.f32.u32 	%f144, %r19;
	div.approx.ftz.f32 	%f145, %f144, %f86;
	st.u32 	[%rd2+64], %r18;
	ld.const.u64 	%rd6, [optixLaunchParams+88];
	cvta.to.global.u64 	%rd21, %rd6;
	ld.global.v4.f32 	{%f146, %f147, %f148, %f149}, [%rd21];
	fma.rn.ftz.f32 	%f153, %f143, 0f3EF0A3D7, %f146;
	fma.rn.ftz.f32 	%f154, %f143, 0f00000000, %f147;
	fma.rn.ftz.f32 	%f155, %f143, 0f00000000, %f148;
	fma.rn.ftz.f32 	%f156, %f145, 0f00000000, %f153;
	fma.rn.ftz.f32 	%f157, %f145, 0f00000000, %f154;
	fma.rn.ftz.f32 	%f158, %f145, 0f3EC28F5C, %f155;
	sub.ftz.f32 	%f159, %f156, %f4;
	sub.ftz.f32 	%f160, %f157, %f5;
	sub.ftz.f32 	%f161, %f158, %f6;
	mul.ftz.f32 	%f162, %f160, %f160;
	fma.rn.ftz.f32 	%f163, %f159, %f159, %f162;
	fma.rn.ftz.f32 	%f164, %f161, %f161, %f163;
	sqrt.approx.ftz.f32 	%f13, %f164;
	rsqrt.approx.ftz.f32 	%f165, %f164;
	mul.ftz.f32 	%f14, %f159, %f165;
	mul.ftz.f32 	%f15, %f160, %f165;
	mul.ftz.f32 	%f16, %f165, %f161;
	mul.ftz.f32 	%f166, %f8, %f15;
	fma.rn.ftz.f32 	%f167, %f7, %f14, %f166;
	fma.rn.ftz.f32 	%f17, %f9, %f16, %f167;
	sub.ftz.f32 	%f168, %f239, 0f00000000;
	sub.ftz.f32 	%f169, %f239, 0f3E36E2EB;
	mul.ftz.f32 	%f170, %f169, %f169;
	fma.rn.ftz.f32 	%f171, %f168, %f168, %f170;
	fma.rn.ftz.f32 	%f172, %f168, %f168, %f171;
	sqrt.approx.ftz.f32 	%f18, %f172;
	rsqrt.approx.ftz.f32 	%f173, %f172;
	mul.ftz.f32 	%f174, %f173, %f168;
	mul.ftz.f32 	%f175, %f173, %f169;
	mul.ftz.f32 	%f176, %f15, %f175;
	fma.rn.ftz.f32 	%f177, %f14, %f174, %f176;
	fma.rn.ftz.f32 	%f19, %f174, %f16, %f177;
	setp.leu.ftz.f32 	%p6, %f17, 0f00000000;
	setp.geu.ftz.f32 	%p7, %f19, 0f80000000;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	LBB0_7;

	ld.const.u64 	%rd22, [optixLaunchParams+80];
	add.ftz.f32 	%f185, %f13, 0fBC23D70A;
	mov.f32 	%f184, 0f3DCCCCCD;
	mov.f32 	%f239, 0f00000000;
	mov.u32 	%r54, 4;
	mov.u32 	%r56, 2;
	// begin inline asm
	call(%r20,%r21,%r22,%r23,%r24,%r25,%r26,%r27,%r28,%r29,%r30,%r31,%r32,%r33,%r34,%r35,%r36,%r37,%r38,%r39,%r40,%r41,%r42,%r43,%r44,%r45,%r46,%r47,%r48,%r49,%r50,%r51),_optix_trace_typed_32,(%r2,%rd22,%f4,%f5,%f6,%f14,%f15,%f16,%f184,%f185,%f239,%r4,%r54,%r4,%r56,%r4,%r4,%r2,%r91,%r92,%r93,%r94,%r95,%r96,%r97,%r98,%r99,%r100,%r101,%r102,%r103,%r104,%r105,%r106,%r107,%r108,%r109,%r110,%r111,%r112,%r113,%r114,%r115,%r116,%r117,%r118,%r119,%r120,%r121);
	// end inline asm
	setp.ne.s32 	%p9, %r20, 0;
	@%p9 bra 	LBB0_7;

	mul.ftz.f32 	%f188, %f13, %f13;
	mul.ftz.f32 	%f189, %f17, %f19;
	mul.ftz.f32 	%f190, %f18, %f189;
	neg.ftz.f32 	%f191, %f190;
	div.approx.ftz.f32 	%f192, %f191, %f188;
	mul.ftz.f32 	%f239, %f192, 0f40A00000;

LBB0_7:
	ld.const.u64 	%rd32, [optixLaunchParams+88];
	cvta.to.global.u64 	%rd31, %rd32;
	ld.global.f32 	%f193, [%rd31+32];
	ld.f32 	%f194, [%rd2+12];
	fma.rn.ftz.f32 	%f195, %f239, %f193, %f194;
	st.f32 	[%rd2+12], %f195;
	ld.f32 	%f196, [%rd2+16];
	fma.rn.ftz.f32 	%f197, %f239, %f193, %f196;
	st.f32 	[%rd2+16], %f197;
	ld.f32 	%f198, [%rd2+20];
	fma.rn.ftz.f32 	%f199, %f239, %f193, %f198;
	st.f32 	[%rd2+20], %f199;
	ld.u32 	%r122, [%rd8+48];
	setp.eq.s32 	%p10, %r122, 0;
	@%p10 bra 	LBB0_10;

	ld.u64 	%rd7, [%rd8+24];
	setp.eq.s64 	%p11, %rd7, 0;
	@%p11 bra 	LBB0_10;

	shl.b64 	%rd24, %rd3, 4;
	add.s64 	%rd25, %rd7, %rd24;
	ld.v2.f32 	{%f200, %f201}, [%rd25];
	shl.b64 	%rd26, %rd4, 4;
	add.s64 	%rd27, %rd7, %rd26;
	ld.v2.f32 	{%f204, %f205}, [%rd27];
	mul.ftz.f32 	%f208, %f22, %f204;
	mul.ftz.f32 	%f209, %f22, %f205;
	fma.rn.ftz.f32 	%f210, %f3, %f200, %f208;
	fma.rn.ftz.f32 	%f211, %f3, %f201, %f209;
	shl.b64 	%rd28, %rd5, 4;
	add.s64 	%rd29, %rd7, %rd28;
	ld.v2.f32 	{%f212, %f213}, [%rd29];
	fma.rn.ftz.f32 	%f216, %f25, %f212, %f210;
	fma.rn.ftz.f32 	%f217, %f25, %f213, %f211;
	ld.u64 	%rd30, [%rd8+56];
	tex.2d.v4.f32.f32 	{%f218, %f219, %f220, %f221}, [%rd30, {%f216, %f217}];
	ld.f32 	%f222, [%rd2+24];
	mul.ftz.f32 	%f223, %f222, %f218;
	st.f32 	[%rd2+24], %f223;
	ld.f32 	%f224, [%rd2+28];
	mul.ftz.f32 	%f225, %f219, %f224;
	st.f32 	[%rd2+28], %f225;
	ld.f32 	%f226, [%rd2+32];
	mul.ftz.f32 	%f227, %f220, %f226;
	st.f32 	[%rd2+32], %f227;
	bra.uni 	LBB0_11;

LBB0_10:
	ld.v2.f32 	{%f228, %f229}, [%rd8+64];
	ld.f32 	%f232, [%rd2+24];
	mul.ftz.f32 	%f233, %f228, %f232;
	st.f32 	[%rd2+24], %f233;
	ld.f32 	%f234, [%rd2+28];
	mul.ftz.f32 	%f235, %f229, %f234;
	st.f32 	[%rd2+28], %f235;
	ld.f32 	%f236, [%rd2+32];
	ld.f32 	%f237, [%rd8+72];
	mul.ftz.f32 	%f238, %f237, %f236;
	st.f32 	[%rd2+32], %f238;

LBB0_11:
	ret;

}
	// .globl	__anyhit__radiance
.visible .entry __anyhit__radiance()
{



	ret;

}
	// .globl	__miss__radiance
.visible .entry __miss__radiance()
{
	.reg .b16 	%rs<2>;
	.reg .b32 	%r<5>;
	.reg .b64 	%rd<4>;


	mov.u32 	%r2, 0;
	// begin inline asm
	call (%r1), _optix_get_payload, (%r2);
	// end inline asm
	mov.u32 	%r4, 1;
	// begin inline asm
	call (%r3), _optix_get_payload, (%r4);
	// end inline asm
	cvt.u64.u32 	%rd1, %r1;
	cvt.u64.u32 	%rd2, %r3;
	bfi.b64 	%rd3, %rd1, %rd2, 32, 32;
	st.u32 	[%rd3+12], %r2;
	st.u32 	[%rd3+16], %r2;
	st.u32 	[%rd3+20], %r2;
	mov.u16 	%rs1, 1;
	st.u8 	[%rd3+61], %rs1;
	ret;

}
	// .globl	__closesthit__shadow
.visible .entry __closesthit__shadow()
{
	.reg .b32 	%r<3>;


	mov.u32 	%r1, 0;
	mov.u32 	%r2, 1;
	// begin inline asm
	call _optix_set_payload, (%r1, %r2);
	// end inline asm
	ret;

}
	// .globl	__anyhit__shadow
.visible .entry __anyhit__shadow()
{



	ret;

}
	// .globl	__miss__shadow
.visible .entry __miss__shadow()
{
	.reg .b32 	%r<3>;


	mov.u32 	%r2, 0;
	// begin inline asm
	call _optix_set_payload, (%r2, %r2);
	// end inline asm
	ret;

}
	// .globl	__closesthit__glossy
.visible .entry __closesthit__glossy()
{
	.reg .pred 	%p<4>;
	.reg .b16 	%rs<2>;
	.reg .f32 	%f<152>;
	.reg .b32 	%r<16>;
	.reg .f64 	%fd<4>;
	.reg .b64 	%rd<18>;


	// begin inline asm
	call (%rd3), _optix_get_sbt_data_ptr_64, ();
	// end inline asm
	mov.u32 	%r5, 0;
	// begin inline asm
	call (%r4), _optix_get_payload, (%r5);
	// end inline asm
	mov.u32 	%r7, 1;
	// begin inline asm
	call (%r6), _optix_get_payload, (%r7);
	// end inline asm
	cvt.u64.u32 	%rd4, %r4;
	cvt.u64.u32 	%rd5, %r6;
	bfi.b64 	%rd2, %rd4, %rd5, 32, 32;
	// begin inline asm
	call (%r8), _optix_read_primitive_idx, ();
	// end inline asm
	ld.u64 	%rd6, [%rd3];
	mul.wide.s32 	%rd7, %r8, 12;
	add.s64 	%rd8, %rd6, %rd7;
	ld.u32 	%r9, [%rd8];
	ld.u32 	%r10, [%rd8+4];
	ld.u32 	%r11, [%rd8+8];
	// begin inline asm
	call (%f20, %f21), _optix_get_triangle_barycentrics, ();
	// end inline asm
	// begin inline asm
	call (%f22, %f23), _optix_get_triangle_barycentrics, ();
	// end inline asm
	mov.f32 	%f34, 0f3F800000;
	sub.ftz.f32 	%f35, %f34, %f20;
	sub.ftz.f32 	%f36, %f35, %f23;
	ld.u64 	%rd9, [%rd3+16];
	mul.wide.u32 	%rd10, %r9, 16;
	add.s64 	%rd11, %rd9, %rd10;
	ld.v4.f32 	{%f37, %f38, %f39, %f40}, [%rd11];
	mul.wide.u32 	%rd12, %r10, 16;
	add.s64 	%rd13, %rd9, %rd12;
	ld.v4.f32 	{%f44, %f45, %f46, %f47}, [%rd13];
	mul.ftz.f32 	%f51, %f20, %f44;
	mul.ftz.f32 	%f52, %f20, %f45;
	mul.ftz.f32 	%f53, %f20, %f46;
	fma.rn.ftz.f32 	%f54, %f37, %f36, %f51;
	fma.rn.ftz.f32 	%f55, %f36, %f38, %f52;
	fma.rn.ftz.f32 	%f56, %f36, %f39, %f53;
	mul.wide.u32 	%rd14, %r11, 16;
	add.s64 	%rd15, %rd9, %rd14;
	ld.v4.f32 	{%f57, %f58, %f59, %f60}, [%rd15];
	fma.rn.ftz.f32 	%f64, %f23, %f57, %f54;
	fma.rn.ftz.f32 	%f65, %f23, %f58, %f55;
	fma.rn.ftz.f32 	%f66, %f23, %f59, %f56;
	mul.ftz.f32 	%f67, %f65, %f65;
	fma.rn.ftz.f32 	%f68, %f64, %f64, %f67;
	fma.rn.ftz.f32 	%f69, %f66, %f66, %f68;
	rsqrt.approx.ftz.f32 	%f70, %f69;
	mul.ftz.f32 	%f71, %f64, %f70;
	mul.ftz.f32 	%f72, %f65, %f70;
	mul.ftz.f32 	%f73, %f66, %f70;
	// begin inline asm
	call (%f24), _optix_get_world_ray_direction_x, ();
	// end inline asm
	// begin inline asm
	call (%f25), _optix_get_world_ray_direction_y, ();
	// end inline asm
	// begin inline asm
	call (%f26), _optix_get_world_ray_direction_z, ();
	// end inline asm
	// begin inline asm
	call (%f27), _optix_get_world_ray_origin_x, ();
	// end inline asm
	// begin inline asm
	call (%f28), _optix_get_world_ray_origin_y, ();
	// end inline asm
	// begin inline asm
	call (%f29), _optix_get_world_ray_origin_z, ();
	// end inline asm
	// begin inline asm
	call (%f30), _optix_get_ray_tmax, ();
	// end inline asm
	fma.rn.ftz.f32 	%f1, %f24, %f30, %f27;
	fma.rn.ftz.f32 	%f2, %f25, %f30, %f28;
	fma.rn.ftz.f32 	%f3, %f26, %f30, %f29;
	mul.ftz.f32 	%f74, %f72, %f25;
	fma.rn.ftz.f32 	%f75, %f24, %f71, %f74;
	fma.rn.ftz.f32 	%f76, %f73, %f26, %f75;
	setp.gt.ftz.f32 	%p1, %f76, 0f00000000;
	neg.ftz.f32 	%f77, %f71;
	neg.ftz.f32 	%f78, %f72;
	neg.ftz.f32 	%f79, %f73;
	selp.f32 	%f4, %f77, %f71, %p1;
	selp.f32 	%f5, %f78, %f72, %p1;
	selp.f32 	%f6, %f79, %f73, %p1;
	ld.const.u64 	%rd16, [optixLaunchParams+88];
	cvta.to.global.u64 	%rd17, %rd16;
	ld.global.f32 	%f80, [%rd17+36];
	// begin inline asm
	call (%f31), _optix_get_world_ray_direction_x, ();
	// end inline asm
	// begin inline asm
	call (%f32), _optix_get_world_ray_direction_y, ();
	// end inline asm
	// begin inline asm
	call (%f33), _optix_get_world_ray_direction_z, ();
	// end inline asm
	add.ftz.f32 	%f81, %f4, %f4;
	add.ftz.f32 	%f82, %f5, %f5;
	add.ftz.f32 	%f83, %f6, %f6;
	mul.ftz.f32 	%f84, %f5, %f32;
	fma.rn.ftz.f32 	%f85, %f4, %f31, %f84;
	fma.rn.ftz.f32 	%f86, %f6, %f33, %f85;
	mul.ftz.f32 	%f87, %f81, %f86;
	mul.ftz.f32 	%f88, %f82, %f86;
	mul.ftz.f32 	%f89, %f83, %f86;
	sub.ftz.f32 	%f7, %f31, %f87;
	sub.ftz.f32 	%f8, %f32, %f88;
	sub.ftz.f32 	%f9, %f33, %f89;
	ld.u32 	%r15, [%rd2+64];
	add.ftz.f32 	%f90, %f80, 0f3F800000;
	rcp.approx.ftz.f32 	%f10, %f90;
	abs.ftz.f32 	%f91, %f7;
	abs.ftz.f32 	%f92, %f9;
	setp.gt.ftz.f32 	%p2, %f91, %f92;
	neg.ftz.f32 	%f93, %f8;
	neg.ftz.f32 	%f94, %f9;
	selp.f32 	%f95, 0f00000000, %f8, %p2;
	selp.f32 	%f96, %f7, %f94, %p2;
	selp.f32 	%f97, %f93, 0f00000000, %p2;
	mul.ftz.f32 	%f98, %f96, %f96;
	fma.rn.ftz.f32 	%f99, %f97, %f97, %f98;
	fma.rn.ftz.f32 	%f100, %f95, %f95, %f99;
	rsqrt.approx.ftz.f32 	%f101, %f100;
	mul.ftz.f32 	%f11, %f97, %f101;
	mul.ftz.f32 	%f12, %f96, %f101;
	mul.ftz.f32 	%f13, %f95, %f101;
	mul.ftz.f32 	%f102, %f9, %f12;
	mul.ftz.f32 	%f103, %f8, %f13;
	sub.ftz.f32 	%f104, %f102, %f103;
	mul.ftz.f32 	%f105, %f7, %f13;
	mul.ftz.f32 	%f106, %f9, %f11;
	sub.ftz.f32 	%f107, %f105, %f106;
	mul.ftz.f32 	%f108, %f8, %f11;
	mul.ftz.f32 	%f109, %f7, %f12;
	sub.ftz.f32 	%f110, %f108, %f109;
	mul.ftz.f32 	%f111, %f107, %f107;
	fma.rn.ftz.f32 	%f112, %f104, %f104, %f111;
	fma.rn.ftz.f32 	%f113, %f110, %f110, %f112;
	rsqrt.approx.ftz.f32 	%f114, %f113;
	mul.ftz.f32 	%f14, %f114, %f104;
	mul.ftz.f32 	%f15, %f114, %f107;
	mul.ftz.f32 	%f16, %f114, %f110;

LBB6_1:
	mad.lo.s32 	%r12, %r15, 1664525, 1013904223;
	and.b32  	%r13, %r12, 16777215;
	cvt.rn.f32.u32 	%f115, %r13;
	mov.f32 	%f116, 0f4B800000;
	div.approx.ftz.f32 	%f117, %f115, %f116;
	mad.lo.s32 	%r15, %r12, 1664525, 1013904223;
	and.b32  	%r14, %r15, 16777215;
	cvt.rn.f32.u32 	%f118, %r14;
	div.approx.ftz.f32 	%f119, %f118, %f116;
	lg2.approx.ftz.f32 	%f120, %f119;
	mul.ftz.f32 	%f121, %f10, %f120;
	ex2.approx.ftz.f32 	%f122, %f121;
	mul.ftz.f32 	%f123, %f122, %f122;
	sub.ftz.f32 	%f125, %f34, %f123;
	sqrt.approx.ftz.f32 	%f126, %f125;
	cvt.ftz.f64.f32 	%fd1, %f117;
	mul.f64 	%fd2, %fd1, 0d401921FB544402EF;
	cvt.rn.ftz.f32.f64 	%f127, %fd2;
	cos.approx.ftz.f32 	%f128, %f127;
	mul.ftz.f32 	%f129, %f126, %f128;
	sin.approx.ftz.f32 	%f130, %f127;
	mul.ftz.f32 	%f131, %f126, %f130;
	mul.ftz.f32 	%f132, %f129, %f14;
	mul.ftz.f32 	%f133, %f129, %f15;
	mul.ftz.f32 	%f134, %f129, %f16;
	fma.rn.ftz.f32 	%f135, %f131, %f11, %f132;
	fma.rn.ftz.f32 	%f136, %f131, %f12, %f133;
	fma.rn.ftz.f32 	%f137, %f131, %f13, %f134;
	fma.rn.ftz.f32 	%f17, %f7, %f122, %f135;
	fma.rn.ftz.f32 	%f18, %f8, %f122, %f136;
	fma.rn.ftz.f32 	%f19, %f9, %f122, %f137;
	mul.ftz.f32 	%f138, %f5, %f18;
	fma.rn.ftz.f32 	%f139, %f4, %f17, %f138;
	fma.rn.ftz.f32 	%f140, %f6, %f19, %f139;
	cvt.ftz.f64.f32 	%fd3, %f140;
	setp.lt.f64 	%p3, %fd3, 0d3F50624DD2F1A9FC;
	@%p3 bra 	LBB6_1;

	st.u32 	[%rd2+64], %r15;
	st.f32 	[%rd2+48], %f17;
	st.f32 	[%rd2+52], %f18;
	st.f32 	[%rd2+56], %f19;
	st.f32 	[%rd2+36], %f1;
	st.f32 	[%rd2+40], %f2;
	st.f32 	[%rd2+44], %f3;
	ld.v2.f32 	{%f141, %f142}, [%rd3+64];
	ld.f32 	%f145, [%rd2+24];
	mul.ftz.f32 	%f146, %f141, %f145;
	st.f32 	[%rd2+24], %f146;
	ld.f32 	%f147, [%rd2+28];
	mul.ftz.f32 	%f148, %f142, %f147;
	st.f32 	[%rd2+28], %f148;
	ld.f32 	%f149, [%rd2+32];
	ld.f32 	%f150, [%rd3+72];
	mul.ftz.f32 	%f151, %f150, %f149;
	st.f32 	[%rd2+32], %f151;
	mov.u16 	%rs1, 1;
	st.u8 	[%rd2+60], %rs1;
	ret;

}
	// .globl	__closesthit__glass
.visible .entry __closesthit__glass()
{
	.reg .pred 	%p<30>;
	.reg .b16 	%rs<2>;
	.reg .f32 	%f<170>;
	.reg .b32 	%r<38>;
	.reg .f64 	%fd<36>;
	.reg .b64 	%rd<18>;


	// begin inline asm
	call (%rd3), _optix_get_sbt_data_ptr_64, ();
	// end inline asm
	mov.u32 	%r6, 0;
	// begin inline asm
	call (%r5), _optix_get_payload, (%r6);
	// end inline asm
	mov.u32 	%r8, 1;
	// begin inline asm
	call (%r7), _optix_get_payload, (%r8);
	// end inline asm
	cvt.u64.u32 	%rd4, %r5;
	cvt.u64.u32 	%rd5, %r7;
	bfi.b64 	%rd2, %rd4, %rd5, 32, 32;
	// begin inline asm
	call (%r9), _optix_read_primitive_idx, ();
	// end inline asm
	ld.u64 	%rd6, [%rd3];
	mul.wide.s32 	%rd7, %r9, 12;
	add.s64 	%rd8, %rd6, %rd7;
	ld.u32 	%r10, [%rd8];
	ld.u32 	%r11, [%rd8+4];
	ld.u32 	%r12, [%rd8+8];
	// begin inline asm
	call (%f43, %f44), _optix_get_triangle_barycentrics, ();
	// end inline asm
	// begin inline asm
	call (%f45, %f46), _optix_get_triangle_barycentrics, ();
	// end inline asm
	mov.f32 	%f54, 0f3F800000;
	sub.ftz.f32 	%f55, %f54, %f43;
	sub.ftz.f32 	%f56, %f55, %f46;
	ld.u64 	%rd9, [%rd3+16];
	mul.wide.u32 	%rd10, %r10, 16;
	add.s64 	%rd11, %rd9, %rd10;
	ld.v4.f32 	{%f57, %f58, %f59, %f60}, [%rd11];
	mul.wide.u32 	%rd12, %r11, 16;
	add.s64 	%rd13, %rd9, %rd12;
	ld.v4.f32 	{%f64, %f65, %f66, %f67}, [%rd13];
	mul.ftz.f32 	%f71, %f43, %f64;
	mul.ftz.f32 	%f72, %f43, %f65;
	mul.ftz.f32 	%f73, %f43, %f66;
	fma.rn.ftz.f32 	%f74, %f57, %f56, %f71;
	fma.rn.ftz.f32 	%f75, %f56, %f58, %f72;
	fma.rn.ftz.f32 	%f76, %f56, %f59, %f73;
	mul.wide.u32 	%rd14, %r12, 16;
	add.s64 	%rd15, %rd9, %rd14;
	ld.v4.f32 	{%f77, %f78, %f79, %f80}, [%rd15];
	fma.rn.ftz.f32 	%f84, %f46, %f77, %f74;
	fma.rn.ftz.f32 	%f85, %f46, %f78, %f75;
	fma.rn.ftz.f32 	%f86, %f46, %f79, %f76;
	mul.ftz.f32 	%f87, %f85, %f85;
	fma.rn.ftz.f32 	%f88, %f84, %f84, %f87;
	fma.rn.ftz.f32 	%f89, %f86, %f86, %f88;
	rsqrt.approx.ftz.f32 	%f90, %f89;
	mul.ftz.f32 	%f1, %f84, %f90;
	mul.ftz.f32 	%f2, %f85, %f90;
	mul.ftz.f32 	%f3, %f86, %f90;
	// begin inline asm
	call (%f47), _optix_get_world_ray_direction_x, ();
	// end inline asm
	// begin inline asm
	call (%f48), _optix_get_world_ray_direction_y, ();
	// end inline asm
	// begin inline asm
	call (%f49), _optix_get_world_ray_direction_z, ();
	// end inline asm
	// begin inline asm
	call (%f50), _optix_get_world_ray_origin_x, ();
	// end inline asm
	// begin inline asm
	call (%f51), _optix_get_world_ray_origin_y, ();
	// end inline asm
	// begin inline asm
	call (%f52), _optix_get_world_ray_origin_z, ();
	// end inline asm
	// begin inline asm
	call (%f53), _optix_get_ray_tmax, ();
	// end inline asm
	fma.rn.ftz.f32 	%f7, %f47, %f53, %f50;
	fma.rn.ftz.f32 	%f8, %f48, %f53, %f51;
	fma.rn.ftz.f32 	%f9, %f49, %f53, %f52;
	ld.const.u64 	%rd16, [optixLaunchParams+88];
	cvta.to.global.u64 	%rd17, %rd16;
	ld.global.f32 	%f10, [%rd17+40];
	mul.ftz.f32 	%f91, %f48, %f2;
	fma.rn.ftz.f32 	%f92, %f47, %f1, %f91;
	mul.ftz.f32 	%f93, %f3, %f49;
	add.ftz.f32 	%f11, %f92, %f93;
	setp.lt.ftz.f32 	%p2, %f11, 0f00000000;
	neg.ftz.f32 	%f12, %f1;
	neg.ftz.f32 	%f13, %f2;
	neg.ftz.f32 	%f14, %f3;
	mul.ftz.f32 	%f94, %f47, %f12;
	sub.ftz.f32 	%f95, %f94, %f91;
	sub.ftz.f32 	%f15, %f95, %f93;
	@%p2 bra 	LBB7_3;
	bra.uni 	LBB7_1;

LBB7_3:
	div.approx.ftz.f32 	%f27, %f54, %f10;
	mul.ftz.f32 	%f115, %f27, %f27;
	cvt.ftz.f64.f32 	%fd18, %f115;
	mul.ftz.f32 	%f116, %f11, %f11;
	cvt.ftz.f64.f32 	%fd19, %f116;
	mov.f64 	%fd20, 0d3FF0000000000000;
	sub.f64 	%fd21, %fd20, %fd19;
	mul.f64 	%fd22, %fd21, %fd18;
	sub.f64 	%fd23, %fd20, %fd22;
	cvt.rn.ftz.f32.f64 	%f28, %fd23;
	setp.lt.ftz.f32 	%p4, %f28, 0f00000000;
	mov.f32 	%f166, 0f00000000;
	mov.f32 	%f167, %f166;
	mov.f32 	%f168, %f166;
	@%p4 bra 	LBB7_5;

	mul.ftz.f32 	%f117, %f47, %f27;
	sqrt.approx.ftz.f32 	%f118, %f28;
	fma.rn.ftz.f32 	%f119, %f11, %f27, %f118;
	mul.ftz.f32 	%f120, %f1, %f119;
	mul.ftz.f32 	%f121, %f2, %f119;
	mul.ftz.f32 	%f122, %f3, %f119;
	mul.ftz.f32 	%f123, %f48, %f27;
	mul.ftz.f32 	%f124, %f49, %f27;
	sub.ftz.f32 	%f168, %f124, %f122;
	sub.ftz.f32 	%f167, %f123, %f121;
	sub.ftz.f32 	%f166, %f117, %f120;

LBB7_5:
	mov.f32 	%f169, %f15;
	bra.uni 	LBB7_6;

LBB7_1:
	div.approx.ftz.f32 	%f16, %f10, %f54;
	mul.ftz.f32 	%f100, %f16, %f16;
	cvt.ftz.f64.f32 	%fd12, %f100;
	mul.ftz.f32 	%f101, %f15, %f15;
	cvt.ftz.f64.f32 	%fd13, %f101;
	mov.f64 	%fd14, 0d3FF0000000000000;
	sub.f64 	%fd15, %fd14, %fd13;
	mul.f64 	%fd16, %fd15, %fd12;
	sub.f64 	%fd17, %fd14, %fd16;
	cvt.rn.ftz.f32.f64 	%f17, %fd17;
	setp.lt.ftz.f32 	%p3, %f17, 0f00000000;
	mov.f32 	%f169, 0f00000000;
	mov.f32 	%f166, %f169;
	mov.f32 	%f167, %f169;
	mov.f32 	%f168, %f169;
	@%p3 bra 	LBB7_6;

	mul.ftz.f32 	%f102, %f47, %f16;
	sqrt.approx.ftz.f32 	%f103, %f17;
	fma.rn.ftz.f32 	%f104, %f15, %f16, %f103;
	mul.ftz.f32 	%f105, %f104, %f12;
	mul.ftz.f32 	%f106, %f104, %f13;
	mul.ftz.f32 	%f107, %f104, %f14;
	mul.ftz.f32 	%f108, %f48, %f16;
	mul.ftz.f32 	%f109, %f49, %f16;
	sub.ftz.f32 	%f168, %f109, %f107;
	sub.ftz.f32 	%f167, %f108, %f106;
	sub.ftz.f32 	%f166, %f102, %f105;

LBB7_6:
	mul.ftz.f32 	%f125, %f167, %f167;
	fma.rn.ftz.f32 	%f126, %f166, %f166, %f125;
	fma.rn.ftz.f32 	%f127, %f168, %f168, %f126;
	sqrt.approx.ftz.f32 	%f128, %f127;
	setp.leu.ftz.f32 	%p5, %f128, 0f00000000;
	@%p5 bra 	LBB7_8;

	st.f32 	[%rd2+48], %f166;
	st.f32 	[%rd2+52], %f167;
	st.f32 	[%rd2+56], %f168;

LBB7_8:
	setp.leu.ftz.f32 	%p6, %f169, 0f00000000;
	@%p6 bra 	LBB7_24;

	sub.ftz.f32 	%f42, %f54, %f169;
	cvt.ftz.f64.f32 	%fd1, %f42;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r1}, %fd1;
	}
	mov.f64 	%fd24, 0d4014000000000000;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r2}, %fd24;
	}
	and.b32  	%r3, %r2, 2146435072;
	setp.eq.s32 	%p7, %r3, 1074790400;
	abs.f64 	%fd2, %fd1;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.f64 	[param0+0], %fd2;
	.param .b64 retval0;
	call.uni (retval0), 
	__internal_accurate_pow, 
	(
	param0
	);
	ld.param.f64 	%fd34, [retval0+0];
	} // callseq 0
	setp.lt.s32 	%p8, %r1, 0;
	and.pred  	%p1, %p8, %p7;
	not.pred 	%p9, %p1;
	@%p9 bra 	LBB7_11;

	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r13}, %fd34;
	}
	xor.b32  	%r14, %r13, -2147483648;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r15, %temp}, %fd34;
	}
	mov.b64 	%fd34, {%r15, %r14};

LBB7_11:
	setp.eq.ftz.f32 	%p10, %f42, 0f00000000;
	@%p10 bra 	LBB7_15;
	bra.uni 	LBB7_12;

LBB7_15:
	selp.b32 	%r16, %r1, 0, %p7;
	or.b32  	%r18, %r16, 2146435072;
	setp.lt.s32 	%p14, %r2, 0;
	selp.b32 	%r19, %r18, %r16, %p14;
	mov.b64 	%fd34, {%r6, %r19};
	bra.uni 	LBB7_16;

LBB7_12:
	setp.gt.s32 	%p11, %r1, -1;
	@%p11 bra 	LBB7_16;

	cvt.rzi.f64.f64 	%fd26, %fd24;
	setp.eq.f64 	%p12, %fd26, 0d4014000000000000;
	@%p12 bra 	LBB7_16;

	mov.f64 	%fd34, 0dFFF8000000000000;

LBB7_16:
	add.f64 	%fd8, %fd1, 0d4014000000000000;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r20}, %fd8;
	}
	and.b32  	%r21, %r20, 2146435072;
	setp.ne.s32 	%p15, %r21, 2146435072;
	mov.f64 	%fd35, %fd34;
	@%p15 bra 	LBB7_22;

	setp.gtu.f64 	%p16, %fd2, 0d7FF0000000000000;
	mov.f64 	%fd35, %fd8;
	@%p16 bra 	LBB7_22;

	{
	.reg .b32 %temp; 
	mov.b64 	{%r22, %temp}, %fd24;
	}
	and.b32  	%r4, %r2, 2147483647;
	setp.eq.s32 	%p17, %r4, 2146435072;
	setp.eq.s32 	%p18, %r22, 0;
	and.pred  	%p19, %p17, %p18;
	@%p19 bra 	LBB7_21;
	bra.uni 	LBB7_19;

LBB7_21:
	setp.gt.f64 	%p25, %fd2, 0d3FF0000000000000;
	selp.b32 	%r30, 2146435072, 0, %p25;
	xor.b32  	%r32, %r30, 2146435072;
	setp.lt.s32 	%p26, %r2, 0;
	selp.b32 	%r33, %r32, %r30, %p26;
	setp.eq.ftz.f32 	%p27, %f42, 0fBF800000;
	selp.b32 	%r34, 1072693248, %r33, %p27;
	mov.b64 	%fd35, {%r6, %r34};
	bra.uni 	LBB7_22;

LBB7_19:
	{
	.reg .b32 %temp; 
	mov.b64 	{%r23, %temp}, %fd1;
	}
	and.b32  	%r24, %r1, 2147483647;
	setp.ne.s32 	%p20, %r24, 2146435072;
	setp.ne.s32 	%p21, %r23, 0;
	or.pred  	%p22, %p20, %p21;
	mov.f64 	%fd35, %fd34;
	@%p22 bra 	LBB7_22;

	setp.gt.s32 	%p23, %r2, -1;
	selp.b32 	%r25, 2146435072, 0, %p23;
	setp.ne.s32 	%p24, %r4, 1071644672;
	or.b32  	%r27, %r25, -2147483648;
	selp.b32 	%r28, %r27, %r25, %p1;
	selp.b32 	%r29, %r28, %r25, %p24;
	mov.b64 	%fd35, {%r6, %r29};

LBB7_22:
	add.ftz.f32 	%f130, %f10, 0f3F800000;
	add.ftz.f32 	%f132, %f10, 0fBF800000;
	div.approx.ftz.f32 	%f133, %f132, %f130;
	mul.ftz.f32 	%f134, %f133, %f133;
	setp.eq.ftz.f32 	%p28, %f42, 0f3F800000;
	selp.f64 	%fd29, 0d3FF0000000000000, %fd35, %p28;
	sub.ftz.f32 	%f135, %f54, %f134;
	cvt.ftz.f64.f32 	%fd30, %f135;
	cvt.ftz.f64.f32 	%fd31, %f134;
	fma.rn.f64 	%fd32, %fd29, %fd30, %fd31;
	cvt.rn.ftz.f32.f64 	%f136, %fd32;
	ld.u32 	%r35, [%rd2+64];
	mad.lo.s32 	%r36, %r35, 1664525, 1013904223;
	and.b32  	%r37, %r36, 16777215;
	cvt.rn.f32.u32 	%f137, %r37;
	mov.f32 	%f138, 0f4B800000;
	div.approx.ftz.f32 	%f139, %f137, %f138;
	st.u32 	[%rd2+64], %r36;
	setp.gtu.ftz.f32 	%p29, %f139, %f136;
	@%p29 bra 	LBB7_24;

	add.ftz.f32 	%f140, %f1, %f1;
	mul.ftz.f32 	%f141, %f140, %f11;
	add.ftz.f32 	%f142, %f2, %f2;
	mul.ftz.f32 	%f143, %f142, %f11;
	add.ftz.f32 	%f144, %f3, %f3;
	mul.ftz.f32 	%f145, %f144, %f11;
	sub.ftz.f32 	%f146, %f47, %f141;
	sub.ftz.f32 	%f147, %f48, %f143;
	sub.ftz.f32 	%f148, %f49, %f145;
	st.f32 	[%rd2+48], %f146;
	st.f32 	[%rd2+52], %f147;
	st.f32 	[%rd2+56], %f148;

LBB7_24:
	st.f32 	[%rd2+36], %f7;
	st.f32 	[%rd2+40], %f8;
	st.f32 	[%rd2+44], %f9;
	ld.v2.f32 	{%f149, %f150}, [%rd3+64];
	ld.f32 	%f153, [%rd2+24];
	mul.ftz.f32 	%f154, %f149, %f153;
	st.f32 	[%rd2+24], %f154;
	ld.f32 	%f155, [%rd2+28];
	mul.ftz.f32 	%f156, %f150, %f155;
	st.f32 	[%rd2+28], %f156;
	ld.f32 	%f157, [%rd2+32];
	ld.f32 	%f158, [%rd3+72];
	mul.ftz.f32 	%f159, %f158, %f157;
	st.f32 	[%rd2+32], %f159;
	mov.u16 	%rs1, 1;
	st.u8 	[%rd2+60], %rs1;
	ret;

}
	// .globl	__raygen__renderFrame
.visible .entry __raygen__renderFrame()
{
	.local .align 16 .b8 	__local_depot8[112];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<11>;
	.reg .b16 	%rs<4>;
	.reg .f32 	%f<211>;
	.reg .b32 	%r<247>;
	.reg .f64 	%fd<6>;
	.reg .b64 	%rd<39>;


	mov.u64 	%SPL, __local_depot8;
	cvta.local.u64 	%SP, %SPL;
	// begin inline asm
	call (%r23), _optix_get_launch_index_x, ();
	// end inline asm
	// begin inline asm
	call (%r27), _optix_get_launch_index_y, ();
	// end inline asm
	ld.const.u32 	%r3, [optixLaunchParams+16];
	cvt.rn.f32.s32 	%f1, %r3;
	// begin inline asm
	call (%r29), _optix_get_launch_dimension_x, ();
	// end inline asm
	ld.const.u32 	%r5, [optixLaunchParams];
	setp.gt.s32 	%p1, %r3, 0;
	@%p1 bra 	LBB8_2;
	bra.uni 	LBB8_1;

LBB8_2:
	rcp.approx.ftz.f32 	%f2, %f1;
	add.s32 	%r33, %r5, -1640531527;
	shl.b32 	%r34, %r5, 4;
	add.s32 	%r35, %r34, -1556008596;
	xor.b32  	%r36, %r35, %r33;
	shr.u32 	%r37, %r5, 5;
	add.s32 	%r38, %r37, -939442524;
	xor.b32  	%r39, %r36, %r38;
	mad.lo.s32 	%r40, %r29, %r23, %r27;
	add.s32 	%r41, %r40, %r39;
	shr.u32 	%r42, %r41, 5;
	add.s32 	%r43, %r42, 2123724318;
	add.s32 	%r44, %r41, -1640531527;
	shl.b32 	%r45, %r41, 4;
	add.s32 	%r46, %r45, -1383041155;
	xor.b32  	%r47, %r46, %r44;
	xor.b32  	%r48, %r47, %r43;
	add.s32 	%r49, %r48, %r5;
	add.s32 	%r50, %r49, 1013904242;
	shl.b32 	%r51, %r49, 4;
	add.s32 	%r52, %r51, -1556008596;
	xor.b32  	%r53, %r52, %r50;
	shr.u32 	%r54, %r49, 5;
	add.s32 	%r55, %r54, -939442524;
	xor.b32  	%r56, %r53, %r55;
	add.s32 	%r57, %r56, %r41;
	shr.u32 	%r58, %r57, 5;
	add.s32 	%r59, %r58, 2123724318;
	add.s32 	%r60, %r57, 1013904242;
	shl.b32 	%r61, %r57, 4;
	add.s32 	%r62, %r61, -1383041155;
	xor.b32  	%r63, %r62, %r60;
	xor.b32  	%r64, %r63, %r59;
	add.s32 	%r65, %r64, %r49;
	add.s32 	%r66, %r65, -626627285;
	shl.b32 	%r67, %r65, 4;
	add.s32 	%r68, %r67, -1556008596;
	xor.b32  	%r69, %r68, %r66;
	shr.u32 	%r70, %r65, 5;
	add.s32 	%r71, %r70, -939442524;
	xor.b32  	%r72, %r69, %r71;
	add.s32 	%r73, %r72, %r57;
	shr.u32 	%r74, %r73, 5;
	add.s32 	%r75, %r74, 2123724318;
	add.s32 	%r76, %r73, -626627285;
	shl.b32 	%r77, %r73, 4;
	add.s32 	%r78, %r77, -1383041155;
	xor.b32  	%r79, %r78, %r76;
	xor.b32  	%r80, %r79, %r75;
	add.s32 	%r81, %r80, %r65;
	cvt.rn.f32.s32 	%f3, %r23;
	cvt.rn.f32.s32 	%f4, %r27;
	ld.const.v2.f32 	{%f65, %f66}, [optixLaunchParams+24];
	mov.u32 	%r32, 0;
	ld.const.v2.f32 	{%f67, %f68}, [optixLaunchParams+32];
	ld.const.v2.f32 	{%f69, %f70}, [optixLaunchParams+48];
	ld.const.v2.f32 	{%f71, %f72}, [optixLaunchParams+56];
	ld.const.v2.f32 	{%f73, %f74}, [optixLaunchParams+40];
	ld.const.v2.f32 	{%f75, %f76}, [optixLaunchParams+64];
	ld.const.u32 	%r6, [optixLaunchParams+20];
	add.u64 	%rd9, %SP, 0;
	cvt.u32.u64 	%r7, %rd9;
	shr.u64 	%rd10, %rd9, 32;
	cvt.u32.u64 	%r8, %rd10;
	ld.const.u64 	%rd2, [optixLaunchParams+80];
	ld.const.u64 	%rd38, [optixLaunchParams+88];
	cvta.to.global.u64 	%rd4, %rd38;
	add.s32 	%r82, %r81, 2027808484;
	shl.b32 	%r83, %r81, 4;
	add.s32 	%r84, %r83, -1556008596;
	xor.b32  	%r85, %r84, %r82;
	shr.u32 	%r86, %r81, 5;
	add.s32 	%r87, %r86, -939442524;
	xor.b32  	%r88, %r85, %r87;
	add.s32 	%r243, %r88, %r73;
	add.u64 	%rd5, %SPL, 0;
	mov.f32 	%f64, 0f00000000;
	// begin inline asm
	call (%r90), _optix_get_launch_dimension_x, ();
	// end inline asm
	// begin inline asm
	call (%r94), _optix_get_launch_dimension_y, ();
	// end inline asm
	mov.u16 	%rs1, 0;
	setp.lt.s32 	%p2, %r6, 1;
	mov.f32 	%f188, %f64;
	mov.u32 	%r240, %r32;
	mov.f32 	%f207, %f64;
	mov.f32 	%f206, %f64;
	mov.f32 	%f205, %f64;

LBB8_3:
	mov.f32 	%f192, %f64;
	mov.u32 	%r242, %r32;

LBB8_4:
	mad.lo.s32 	%r96, %r243, 1664525, 1013904223;
	and.b32  	%r97, %r96, 16777215;
	cvt.rn.f32.u32 	%f78, %r97;
	mov.f32 	%f79, 0f4B800000;
	div.approx.ftz.f32 	%f80, %f78, %f79;
	add.ftz.f32 	%f81, %f188, %f80;
	mad.lo.s32 	%r243, %r96, 1664525, 1013904223;
	and.b32  	%r98, %r243, 16777215;
	cvt.rn.f32.u32 	%f82, %r98;
	div.approx.ftz.f32 	%f83, %f82, %f79;
	add.ftz.f32 	%f84, %f192, %f83;
	fma.rn.ftz.f32 	%f85, %f2, %f81, %f3;
	fma.rn.ftz.f32 	%f86, %f2, %f84, %f4;
	cvt.rn.f32.u32 	%f87, %r90;
	cvt.rn.f32.u32 	%f88, %r94;
	div.approx.ftz.f32 	%f89, %f85, %f87;
	div.approx.ftz.f32 	%f90, %f86, %f88;
	fma.rn.ftz.f32 	%f91, %f89, 0f40000000, 0fBF800000;
	mov.u32 	%r99, 1065353216;
	fma.rn.ftz.f32 	%f92, %f90, 0f40000000, 0fBF800000;
	fma.rn.ftz.f32 	%f93, %f91, %f69, %f68;
	fma.rn.ftz.f32 	%f94, %f91, %f70, %f73;
	fma.rn.ftz.f32 	%f95, %f91, %f71, %f74;
	fma.rn.ftz.f32 	%f96, %f92, %f72, %f93;
	fma.rn.ftz.f32 	%f97, %f92, %f75, %f94;
	fma.rn.ftz.f32 	%f98, %f92, %f76, %f95;
	mul.ftz.f32 	%f99, %f97, %f97;
	fma.rn.ftz.f32 	%f100, %f96, %f96, %f99;
	fma.rn.ftz.f32 	%f101, %f98, %f98, %f100;
	rsqrt.approx.ftz.f32 	%f102, %f101;
	mul.ftz.f32 	%f198, %f98, %f102;
	mul.ftz.f32 	%f197, %f97, %f102;
	mul.ftz.f32 	%f196, %f96, %f102;
	st.local.u32 	[%rd5], %r32;
	st.local.u32 	[%rd5+4], %r32;
	st.local.u32 	[%rd5+8], %r32;
	st.local.u32 	[%rd5+12], %r32;
	st.local.u32 	[%rd5+16], %r32;
	st.local.u32 	[%rd5+20], %r32;
	st.local.u32 	[%rd5+24], %r99;
	st.local.u32 	[%rd5+28], %r99;
	st.local.u32 	[%rd5+32], %r99;
	mov.u32 	%r101, 1;
	st.local.u32 	[%rd5+68], %r101;
	st.local.v2.u8 	[%rd5+60], {%rs1, %rs1};
	st.local.u32 	[%rd5+64], %r243;
	@%p2 bra 	LBB8_10;

	mov.u32 	%r244, 1;
	mov.f32 	%f199, %f65;
	mov.f32 	%f200, %f66;
	mov.f32 	%f201, %f67;
	mov.u32 	%r245, %r8;
	mov.u32 	%r246, %r7;

LBB8_6:
	mov.u32 	%r239, 1;
	mov.f32 	%f109, 0f3DCCCCCD;
	mov.f32 	%f110, 0f47435000;
	mov.f32 	%f111, 0f00000000;
	mov.u32 	%r140, 0;
	mov.u32 	%r141, 2;
	// begin inline asm
	call(%r245,%r246,%r105,%r106,%r107,%r108,%r109,%r110,%r111,%r112,%r113,%r114,%r115,%r116,%r117,%r118,%r119,%r120,%r121,%r122,%r123,%r124,%r125,%r126,%r127,%r128,%r129,%r130,%r131,%r132,%r133,%r134),_optix_trace_typed_32,(%r140,%rd2,%f199,%f200,%f201,%f196,%f197,%f198,%f109,%f110,%f111,%r239,%r140,%r140,%r141,%r140,%r141,%r245,%r246,%r174,%r175,%r176,%r177,%r178,%r179,%r180,%r181,%r182,%r183,%r184,%r185,%r186,%r187,%r188,%r189,%r190,%r191,%r192,%r193,%r194,%r195,%r196,%r197,%r198,%r199,%r200,%r201,%r202,%r203);
	// end inline asm
	ld.local.f32 	%f112, [%rd5];
	add.ftz.f32 	%f113, %f205, %f112;
	ld.local.f32 	%f114, [%rd5+4];
	add.ftz.f32 	%f115, %f206, %f114;
	ld.local.f32 	%f116, [%rd5+8];
	add.ftz.f32 	%f117, %f207, %f116;
	ld.local.f32 	%f37, [%rd5+24];
	ld.local.f32 	%f118, [%rd5+12];
	ld.local.f32 	%f38, [%rd5+28];
	ld.local.f32 	%f119, [%rd5+16];
	ld.local.f32 	%f39, [%rd5+32];
	ld.local.f32 	%f120, [%rd5+20];
	fma.rn.ftz.f32 	%f205, %f118, %f37, %f113;
	fma.rn.ftz.f32 	%f206, %f119, %f38, %f115;
	fma.rn.ftz.f32 	%f207, %f120, %f39, %f117;
	ld.global.u8 	%rs2, [%rd4+44];
	setp.eq.s16 	%p3, %rs2, 0;
	@%p3 bra 	LBB8_9;

	mov.f32 	%f187, 0f4B800000;
	max.ftz.f32 	%f121, %f38, %f39;
	max.ftz.f32 	%f43, %f37, %f121;
	ld.local.u32 	%r204, [%rd5+64];
	mad.lo.s32 	%r205, %r204, 1664525, 1013904223;
	st.local.u32 	[%rd5+64], %r205;
	and.b32  	%r206, %r205, 16777215;
	cvt.rn.f32.u32 	%f122, %r206;
	div.approx.ftz.f32 	%f124, %f122, %f187;
	setp.gt.ftz.f32 	%p4, %f124, %f43;
	@%p4 bra 	LBB8_10;

	rcp.approx.ftz.f32 	%f125, %f43;
	mul.ftz.f32 	%f126, %f125, %f37;
	st.local.f32 	[%rd5+24], %f126;
	mul.ftz.f32 	%f127, %f125, %f38;
	st.local.f32 	[%rd5+28], %f127;
	mul.ftz.f32 	%f128, %f125, %f39;
	st.local.f32 	[%rd5+32], %f128;

LBB8_9:
	ld.local.f32 	%f201, [%rd5+44];
	ld.local.f32 	%f200, [%rd5+40];
	ld.local.f32 	%f199, [%rd5+36];
	ld.local.f32 	%f198, [%rd5+56];
	ld.local.f32 	%f197, [%rd5+52];
	ld.local.f32 	%f196, [%rd5+48];
	ld.local.u8 	%rs3, [%rd5+61];
	setp.eq.s16 	%p5, %rs3, 0;
	setp.lt.s32 	%p6, %r244, %r6;
	and.pred  	%p7, %p6, %p5;
	add.s32 	%r244, %r244, 1;
	@%p7 bra 	LBB8_6;

LBB8_10:
	add.s32 	%r242, %r242, 1;
	cvt.rn.f32.s32 	%f192, %r242;
	setp.lt.ftz.f32 	%p8, %f192, %f1;
	@%p8 bra 	LBB8_4;

	add.s32 	%r240, %r240, 1;
	cvt.rn.f32.s32 	%f188, %r240;
	setp.lt.ftz.f32 	%p9, %f188, %f1;
	@%p9 bra 	LBB8_3;
	bra.uni 	LBB8_12;

LBB8_1:
	mov.f32 	%f205, 0f00000000;
	ld.const.u64 	%rd38, [optixLaunchParams+88];
	mov.f32 	%f206, %f205;
	mov.f32 	%f207, %f205;

LBB8_12:
	ld.const.u32 	%r236, [optixLaunchParams];
	mul.ftz.f32 	%f129, %f1, %f1;
	rcp.approx.ftz.f32 	%f130, %f129;
	mov.f32 	%f131, 0f3F800000;
	cvta.to.global.u64 	%rd12, %rd38;
	add.s64 	%rd8, %rd12, 28;
	ld.global.f32 	%f132, [%rd12+28];
	// begin inline asm
	call (%r207), _optix_get_launch_dimension_x, ();
	// end inline asm
	mad.lo.s32 	%r210, %r207, %r27, %r23;
	ld.const.u32 	%r211, [optixLaunchParams+4];
	cvt.rn.f32.s32 	%f133, %r211;
	ld.global.u64 	%rd13, [%rd12+16];
	mul.wide.u32 	%rd14, %r210, 16;
	add.s64 	%rd15, %rd13, %rd14;
	ld.v4.f32 	{%f134, %f135, %f136, %f137}, [%rd15];
	mul.ftz.f32 	%f142, %f134, %f133;
	mul.ftz.f32 	%f143, %f135, %f133;
	mul.ftz.f32 	%f144, %f136, %f133;
	fma.rn.ftz.f32 	%f145, %f130, %f205, %f142;
	fma.rn.ftz.f32 	%f146, %f130, %f206, %f143;
	fma.rn.ftz.f32 	%f147, %f130, %f207, %f144;
	fma.rn.ftz.f32 	%f148, %f137, %f133, 0f3F800000;
	add.s32 	%r212, %r211, 1;
	cvt.rn.f32.s32 	%f149, %r212;
	rcp.approx.ftz.f32 	%f150, %f149;
	mul.ftz.f32 	%f151, %f148, %f150;
	mul.ftz.f32 	%f152, %f147, %f150;
	mul.ftz.f32 	%f153, %f146, %f150;
	mul.ftz.f32 	%f154, %f145, %f150;
	st.v4.f32 	[%rd15], {%f154, %f153, %f152, %f151};
	ld.global.u64 	%rd16, [%rd12+16];
	add.s64 	%rd17, %rd16, %rd14;
	ld.v4.f32 	{%f155, %f156, %f157, %f158}, [%rd17];
	rcp.approx.ftz.f32 	%f162, %f132;
	lg2.approx.ftz.f32 	%f163, %f155;
	mul.ftz.f32 	%f164, %f162, %f163;
	ex2.approx.ftz.f32 	%f165, %f164;
	min.ftz.f32 	%f166, %f131, %f165;
	mul.ftz.f32 	%f167, %f166, 0f437F0000;
	cvt.rzi.ftz.s32.f32 	%r213, %f167;
	lg2.approx.ftz.f32 	%f168, %f156;
	mul.ftz.f32 	%f169, %f162, %f168;
	ex2.approx.ftz.f32 	%f170, %f169;
	min.ftz.f32 	%f171, %f131, %f170;
	mul.ftz.f32 	%f172, %f171, 0f437F0000;
	cvt.rzi.ftz.s32.f32 	%r214, %f172;
	lg2.approx.ftz.f32 	%f173, %f157;
	mul.ftz.f32 	%f174, %f162, %f173;
	ex2.approx.ftz.f32 	%f175, %f174;
	min.ftz.f32 	%f176, %f131, %f175;
	mul.ftz.f32 	%f177, %f176, 0f437F0000;
	cvt.rzi.ftz.s32.f32 	%r215, %f177;
	shl.b32 	%r216, %r214, 8;
	shl.b32 	%r217, %r215, 16;
	or.b32  	%r218, %r213, %r216;
	or.b32  	%r219, %r218, %r217;
	or.b32  	%r220, %r219, -16777216;
	ld.const.u64 	%rd18, [optixLaunchParams+8];
	cvta.to.global.u64 	%rd19, %rd18;
	mul.wide.u32 	%rd20, %r210, 4;
	add.s64 	%rd21, %rd19, %rd20;
	st.global.u32 	[%rd21], %r220;
	or.b32  	%r221, %r27, %r23;
	or.b32  	%r222, %r221, %r236;
	setp.ne.s32 	%p10, %r222, 0;
	@%p10 bra 	LBB8_14;

	ld.const.u32 	%r237, [optixLaunchParams+16];
	mov.u64 	%rd22, $str;
	cvta.global.u64 	%rd23, %rd22;
	mov.u64 	%rd24, 0;
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd23;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd24;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r229, [retval0+0];
	} // callseq 1
	mov.u64 	%rd25, $str$1;
	cvta.global.u64 	%rd26, %rd25;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd26;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd24;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r230, [retval0+0];
	} // callseq 2
	ld.global.v4.f32 	{%f178, %f179, %f180, %f181}, [%rd12];
	cvt.ftz.f64.f32 	%fd1, %f179;
	cvt.ftz.f64.f32 	%fd2, %f178;
	add.u64 	%rd28, %SP, 80;
	add.u64 	%rd29, %SPL, 80;
	st.local.v2.f64 	[%rd29], {%fd2, %fd1};
	cvt.ftz.f64.f32 	%fd3, %f181;
	cvt.ftz.f64.f32 	%fd4, %f180;
	st.local.v2.f64 	[%rd29+16], {%fd4, %fd3};
	mov.u64 	%rd30, $str$2;
	cvta.global.u64 	%rd31, %rd30;
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd31;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd28;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r231, [retval0+0];
	} // callseq 3
	// begin inline asm
	call (%r227), _optix_get_launch_dimension_y, ();
	// end inline asm
	// begin inline asm
	call (%r223), _optix_get_launch_dimension_x, ();
	// end inline asm
	st.local.v2.u32 	[%rd29], {%r223, %r227};
	mov.u64 	%rd32, $str$3;
	cvta.global.u64 	%rd33, %rd32;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd33;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd28;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r232, [retval0+0];
	} // callseq 4
	st.local.u32 	[%rd29], %r237;
	mov.u64 	%rd34, $str$4;
	cvta.global.u64 	%rd35, %rd34;
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd35;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd28;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r233, [retval0+0];
	} // callseq 5
	ld.global.f32 	%f186, [%rd8+12];
	cvt.ftz.f64.f32 	%fd5, %f186;
	st.local.f64 	[%rd29], %fd5;
	mov.u64 	%rd36, $str$5;
	cvta.global.u64 	%rd37, %rd36;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd37;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd28;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r234, [retval0+0];
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd23;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd24;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r235, [retval0+0];
	} // callseq 7

LBB8_14:
	ret;

}
.func  (.param .b64 func_retval0) __internal_accurate_pow(
	.param .b64 __internal_accurate_pow_param_0
)
{
	.reg .pred 	%p<10>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<53>;
	.reg .f64 	%fd<138>;


	ld.param.f64 	%fd12, [__internal_accurate_pow_param_0];
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r50}, %fd12;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%r49, %temp}, %fd12;
	}
	shr.u32 	%r51, %r50, 20;
	setp.ne.s32 	%p1, %r51, 0;
	@%p1 bra 	LBB9_2;

	mul.f64 	%fd13, %fd12, 0d4350000000000000;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r50}, %fd13;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%r49, %temp}, %fd13;
	}
	shr.u32 	%r16, %r50, 20;
	add.s32 	%r51, %r16, -54;

LBB9_2:
	add.s32 	%r52, %r51, -1023;
	and.b32  	%r17, %r50, -2146435073;
	or.b32  	%r18, %r17, 1072693248;
	mov.b64 	%fd135, {%r49, %r18};
	setp.lt.u32 	%p2, %r18, 1073127583;
	@%p2 bra 	LBB9_4;

	{
	.reg .b32 %temp; 
	mov.b64 	{%r19, %temp}, %fd135;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r20}, %fd135;
	}
	add.s32 	%r21, %r20, -1048576;
	mov.b64 	%fd135, {%r19, %r21};
	add.s32 	%r52, %r51, -1022;

LBB9_4:
	add.f64 	%fd14, %fd135, 0d3FF0000000000000;
	mov.f64 	%fd15, 0d3FF0000000000000;
	rcp.approx.ftz.f64 	%fd16, %fd14;
	neg.f64 	%fd17, %fd14;
	fma.rn.f64 	%fd18, %fd17, %fd16, %fd15;
	fma.rn.f64 	%fd19, %fd18, %fd18, %fd18;
	fma.rn.f64 	%fd20, %fd19, %fd16, %fd16;
	add.f64 	%fd21, %fd135, 0dBFF0000000000000;
	mul.f64 	%fd22, %fd21, %fd20;
	fma.rn.f64 	%fd23, %fd21, %fd20, %fd22;
	mul.f64 	%fd24, %fd23, %fd23;
	mov.f64 	%fd25, 0d3ED0F5D241AD3B5A;
	mov.f64 	%fd26, 0d3EB0F5FF7D2CAFE2;
	fma.rn.f64 	%fd27, %fd26, %fd24, %fd25;
	mov.f64 	%fd28, 0d3EF3B20A75488A3F;
	fma.rn.f64 	%fd29, %fd27, %fd24, %fd28;
	mov.f64 	%fd30, 0d3F1745CDE4FAECD5;
	fma.rn.f64 	%fd31, %fd29, %fd24, %fd30;
	mov.f64 	%fd32, 0d3F3C71C7258A578B;
	fma.rn.f64 	%fd33, %fd31, %fd24, %fd32;
	mov.f64 	%fd34, 0d3F6249249242B910;
	fma.rn.f64 	%fd35, %fd33, %fd24, %fd34;
	mov.f64 	%fd36, 0d3F89999999999DFB;
	fma.rn.f64 	%fd37, %fd35, %fd24, %fd36;
	sub.f64 	%fd38, %fd21, %fd23;
	add.f64 	%fd39, %fd38, %fd38;
	neg.f64 	%fd40, %fd23;
	fma.rn.f64 	%fd41, %fd40, %fd21, %fd39;
	mul.f64 	%fd42, %fd20, %fd41;
	fma.rn.f64 	%fd43, %fd24, %fd37, 0d3FB5555555555555;
	mov.f64 	%fd44, 0d3FB5555555555555;
	sub.f64 	%fd45, %fd44, %fd43;
	fma.rn.f64 	%fd46, %fd24, %fd37, %fd45;
	add.f64 	%fd47, %fd46, 0d0000000000000000;
	add.f64 	%fd48, %fd47, 0dBC46A4CB00B9E7B0;
	add.f64 	%fd49, %fd43, %fd48;
	sub.f64 	%fd50, %fd43, %fd49;
	add.f64 	%fd51, %fd48, %fd50;
	mul.rn.f64 	%fd52, %fd23, %fd23;
	neg.f64 	%fd53, %fd52;
	fma.rn.f64 	%fd54, %fd23, %fd23, %fd53;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r22, %temp}, %fd42;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r23}, %fd42;
	}
	add.s32 	%r24, %r23, 1048576;
	mov.b64 	%fd55, {%r22, %r24};
	fma.rn.f64 	%fd56, %fd23, %fd55, %fd54;
	mul.rn.f64 	%fd57, %fd52, %fd23;
	neg.f64 	%fd58, %fd57;
	fma.rn.f64 	%fd59, %fd52, %fd23, %fd58;
	fma.rn.f64 	%fd60, %fd52, %fd42, %fd59;
	fma.rn.f64 	%fd61, %fd56, %fd23, %fd60;
	mul.rn.f64 	%fd62, %fd49, %fd57;
	neg.f64 	%fd63, %fd62;
	fma.rn.f64 	%fd64, %fd49, %fd57, %fd63;
	fma.rn.f64 	%fd65, %fd49, %fd61, %fd64;
	fma.rn.f64 	%fd66, %fd51, %fd57, %fd65;
	add.f64 	%fd67, %fd62, %fd66;
	sub.f64 	%fd68, %fd62, %fd67;
	add.f64 	%fd69, %fd66, %fd68;
	add.f64 	%fd70, %fd23, %fd67;
	sub.f64 	%fd71, %fd23, %fd70;
	add.f64 	%fd72, %fd67, %fd71;
	add.f64 	%fd73, %fd69, %fd72;
	add.f64 	%fd74, %fd42, %fd73;
	add.f64 	%fd75, %fd70, %fd74;
	sub.f64 	%fd76, %fd70, %fd75;
	add.f64 	%fd77, %fd74, %fd76;
	xor.b32  	%r25, %r52, -2147483648;
	mov.u32 	%r26, -2147483648;
	mov.u32 	%r27, 1127219200;
	mov.b64 	%fd78, {%r25, %r27};
	mov.b64 	%fd79, {%r26, %r27};
	sub.f64 	%fd80, %fd78, %fd79;
	mov.f64 	%fd81, 0d3FE62E42FEFA39EF;
	fma.rn.f64 	%fd82, %fd80, %fd81, %fd75;
	neg.f64 	%fd83, %fd80;
	fma.rn.f64 	%fd84, %fd83, %fd81, %fd82;
	sub.f64 	%fd85, %fd84, %fd75;
	sub.f64 	%fd86, %fd77, %fd85;
	mov.f64 	%fd87, 0d3C7ABC9E3B39803F;
	fma.rn.f64 	%fd88, %fd80, %fd87, %fd86;
	add.f64 	%fd89, %fd82, %fd88;
	sub.f64 	%fd90, %fd82, %fd89;
	add.f64 	%fd91, %fd88, %fd90;
	mov.f64 	%fd92, 0d4014000000000000;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r28}, %fd92;
	}
	shl.b32 	%r29, %r28, 1;
	setp.gt.u32 	%p3, %r29, -33554433;
	and.b32  	%r30, %r28, -15728641;
	selp.b32 	%r31, %r30, %r28, %p3;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r32, %temp}, %fd92;
	}
	mov.b64 	%fd93, {%r32, %r31};
	mul.rn.f64 	%fd94, %fd89, %fd93;
	neg.f64 	%fd95, %fd94;
	fma.rn.f64 	%fd96, %fd89, %fd93, %fd95;
	fma.rn.f64 	%fd97, %fd91, %fd93, %fd96;
	add.f64 	%fd4, %fd94, %fd97;
	sub.f64 	%fd98, %fd94, %fd4;
	add.f64 	%fd5, %fd97, %fd98;
	mov.f64 	%fd99, 0d4338000000000000;
	mov.f64 	%fd100, 0d3FF71547652B82FE;
	fma.rn.f64 	%fd101, %fd4, %fd100, %fd99;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r13, %temp}, %fd101;
	}
	mov.f64 	%fd102, 0dC338000000000000;
	add.rn.f64 	%fd103, %fd101, %fd102;
	mov.f64 	%fd104, 0dBFE62E42FEFA39EF;
	fma.rn.f64 	%fd105, %fd103, %fd104, %fd4;
	mov.f64 	%fd106, 0dBC7ABC9E3B39803F;
	fma.rn.f64 	%fd107, %fd103, %fd106, %fd105;
	mov.f64 	%fd108, 0d3E928AF3FCA213EA;
	mov.f64 	%fd109, 0d3E5ADE1569CE2BDF;
	fma.rn.f64 	%fd110, %fd109, %fd107, %fd108;
	mov.f64 	%fd111, 0d3EC71DEE62401315;
	fma.rn.f64 	%fd112, %fd110, %fd107, %fd111;
	mov.f64 	%fd113, 0d3EFA01997C89EB71;
	fma.rn.f64 	%fd114, %fd112, %fd107, %fd113;
	mov.f64 	%fd115, 0d3F2A01A014761F65;
	fma.rn.f64 	%fd116, %fd114, %fd107, %fd115;
	mov.f64 	%fd117, 0d3F56C16C1852B7AF;
	fma.rn.f64 	%fd118, %fd116, %fd107, %fd117;
	mov.f64 	%fd119, 0d3F81111111122322;
	fma.rn.f64 	%fd120, %fd118, %fd107, %fd119;
	mov.f64 	%fd121, 0d3FA55555555502A1;
	fma.rn.f64 	%fd122, %fd120, %fd107, %fd121;
	mov.f64 	%fd123, 0d3FC5555555555511;
	fma.rn.f64 	%fd124, %fd122, %fd107, %fd123;
	mov.f64 	%fd125, 0d3FE000000000000B;
	fma.rn.f64 	%fd126, %fd124, %fd107, %fd125;
	fma.rn.f64 	%fd127, %fd126, %fd107, %fd15;
	fma.rn.f64 	%fd128, %fd127, %fd107, %fd15;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r14, %temp}, %fd128;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r15}, %fd128;
	}
	shl.b32 	%r33, %r13, 20;
	add.s32 	%r34, %r15, %r33;
	mov.b64 	%fd136, {%r14, %r34};
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r35}, %fd4;
	}
	mov.b32 	%f2, %r35;
	abs.ftz.f32 	%f1, %f2;
	setp.lt.ftz.f32 	%p4, %f1, 0f4086232B;
	@%p4 bra 	LBB9_7;

	setp.lt.f64 	%p5, %fd4, 0d0000000000000000;
	add.f64 	%fd129, %fd4, 0d7FF0000000000000;
	selp.f64 	%fd136, 0d0000000000000000, %fd129, %p5;
	setp.geu.ftz.f32 	%p6, %f1, 0f40874800;
	@%p6 bra 	LBB9_7;

	mov.f64 	%fd134, 0d4338000000000000;
	mov.f64 	%fd133, 0d3FF71547652B82FE;
	fma.rn.f64 	%fd132, %fd4, %fd133, %fd134;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r48, %temp}, %fd132;
	}
	shr.u32 	%r36, %r48, 31;
	add.s32 	%r37, %r48, %r36;
	shr.s32 	%r38, %r37, 1;
	shl.b32 	%r39, %r38, 20;
	add.s32 	%r40, %r15, %r39;
	mov.b64 	%fd130, {%r14, %r40};
	sub.s32 	%r41, %r48, %r38;
	shl.b32 	%r42, %r41, 20;
	add.s32 	%r43, %r42, 1072693248;
	mov.u32 	%r44, 0;
	mov.b64 	%fd131, {%r44, %r43};
	mul.f64 	%fd136, %fd130, %fd131;

LBB9_7:
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r45}, %fd136;
	}
	and.b32  	%r46, %r45, 2147483647;
	setp.eq.s32 	%p7, %r46, 2146435072;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r47, %temp}, %fd136;
	}
	setp.eq.s32 	%p8, %r47, 0;
	and.pred  	%p9, %p8, %p7;
	@%p9 bra 	LBB9_9;

	fma.rn.f64 	%fd136, %fd136, %fd5, %fd136;

LBB9_9:
	st.param.f64 	[func_retval0+0], %fd136;
	ret;

}

